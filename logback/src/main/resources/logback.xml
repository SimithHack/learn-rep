<!--
    将configuration的debug属性设置为true，可以打印状态信息，这样就不需要手动写代码，
    使用StatusPrinter打印状态信息了，这个debug属性只是和状态数据相关，不影响其他的配置
-->
<configuration debug="true">
    <!--
        如果不指定debug属性，也可以配置下边这个Listener
        或者指定statusListener环境变量，变量值为ch.qos.logback.core.status.OnConsoleStatusListener
        这样方便我们调试
    -->
    <statusListener class="ch.qos.logback.core.status.OnConsoleStatusListener" />
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <!-- encoders are assigned the type
             ch.qos.logback.classic.encoder.PatternLayoutEncoder by default -->
        <encoder>
            <pattern>%d{HH:mm:ss.SSS} %contextName [%thread] %-5level %logger{36} - %msg%n</pattern>
        </encoder>
    </appender>
    <appender name="FILE" class="ch.qos.logback.core.FileAppender">
        <file>logback.log</file>
        <encoder>
            <pattern>%msg%n</pattern>
        </encoder>
    </appender>
    <!-- 不配置appender 它就会从父logger里边查找-->
    <logger name="com.xie.learn.logback.AppenderHierarchy" level="info"/>
    <!-- 重复输出到console -->
    <logger name="com.xie.learn.logback.DuplicateLogTest" level="info">
        <appender-ref ref="STDOUT"/>
    </logger>
    <!-- 将additivity设置为false,则日志请求不会继续往下传播 因此root是看不到的 -->
    <logger name="com.xie.learn.logback.AdditiveAttrTest" level="INFO" additivity="false">
        <appender-ref ref="FILE"/>
    </logger>
    <logger name="com.xie.learn.logback.ContextNameTest" level="INFO"/>
    <root level="off">
        <appender-ref ref="STDOUT" />
    </root>
</configuration>
